name: Development CI Pipeline

on:
  push:
    branches:
      - development

jobs:
  build-and-seo:
    runs-on: ubuntu-latest
    env:
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_TO: ${{ secrets.EMAIL_TO }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      GA_PROPERTY_ID: ${{ secrets.GA_PROPERTY_ID }}
      GA_TAG_ID: ${{ secrets.GA_TAG_ID }}
      PSI_API_KEY: ${{ secrets.PSI_API_KEY }}

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Cache Node modules
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4Ô∏è‚É£ Generate static pages
      - name: Generate static pages
        run: |
          docker run --rm \
            -v $GITHUB_WORKSPACE/frontend:/app \
            -w /app \
            node:20 \
            sh -c "npm ci && node generate-pages.js && node generate-sitemap.js"

      # 5Ô∏è‚É£ Build backend container
      - name: Build backend container
        run: docker build -f backend/Dockerfile -t freeunitsconverter_dev-backend ./backend

      # 6Ô∏è‚É£ Build frontend container
      - name: Build frontend container
        run: docker build -f frontend/Dockerfile.dev -t freeunitsconverter_dev-frontend ./frontend

      # 7Ô∏è‚É£ Build SEO audit container
      - name: Build SEO audit container
        run: docker build -f seo_audit/Dockerfile.dev -t freeunitsconverter_dev-seo_audit ./seo_audit

      # 8Ô∏è‚É£ Create Docker network
      - name: Create Docker network
        run: docker network create seo_test_net || true

      # 9Ô∏è‚É£ Start frontend container
      - name: Start frontend container
        run: docker run -d --name frontend_test --network seo_test_net freeunitsconverter_dev-frontend

      # üîü Wait for frontend container to be ready
      - name: Wait for frontend container
        run: |
          echo "Waiting for frontend container to be ready..."
          for i in {1..10}; do
            if docker run --rm --network seo_test_net curlimages/curl:8.2.1 -sSf http://frontend_test:80; then
              echo "Frontend is ready!"
              break
            else
              echo "Attempt $i: frontend not ready, retrying in 5s..."
              sleep 5
            fi
          done

      # 1Ô∏è‚É£1Ô∏è‚É£ Clean old SEO reports
      - name: Clean old SEO reports
        run: rm -rf seo_audit/reports/*

      # 1Ô∏è‚É£2Ô∏è‚É£ Run SEO audit container
      - name: Run SEO audit
        run: |
          docker run --rm \
            --network seo_test_net \
            -e SITE_URL=http://frontend_test:80 \
            -e EMAIL_USER=$EMAIL_USER \
            -e EMAIL_PASS=$EMAIL_PASS \
            -e EMAIL_TO=$EMAIL_TO \
            -e EMAIL_HOST=$EMAIL_HOST \
            -e EMAIL_PORT=$EMAIL_PORT \
            -e GA_PROPERTY_ID=$GA_PROPERTY_ID \
            -e GA_TAG_ID=$GA_TAG_ID \
            -e PSI_API_KEY=$PSI_API_KEY \
            -v $GITHUB_WORKSPACE/frontend/static-pages:/usr/src/app/static-pages:ro \
            freeunitsconverter_dev-seo_audit

      # 1Ô∏è‚É£3Ô∏è‚É£ Stop frontend container
      - name: Stop frontend container
        run: |
          docker stop frontend_test
          docker rm frontend_test || true

      # 1Ô∏è‚É£4Ô∏è‚É£ Upload only the latest SEO audit report
      - name: Find latest SEO audit report
        id: upload
        run: |
          latest=$(ls -t seo_audit/reports/seo_report_*.txt 2>/dev/null | head -1)
          if [ -z "$latest" ]; then
            echo "No report found"
            echo "report="
          else
            echo "Latest report: $latest"
            echo "report=$latest" >> $GITHUB_OUTPUT
          fi

      - name: Upload latest SEO audit report
        if: steps.upload.outputs.report != ''
        uses: actions/upload-artifact@v4
        with:
          name: seo-report
          path: ${{ steps.upload.outputs.report }}


      # 1Ô∏è‚É£5Ô∏è‚É£ Send email on failure
      - name: Send email on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ env.EMAIL_HOST }}
          server_port: ${{ env.EMAIL_PORT }}
          username: ${{ env.EMAIL_USER }}
          password: ${{ env.EMAIL_PASS }}
          subject: "‚ö† SEO Regression Detected in Development"
          to: ${{ env.EMAIL_TO }}
          from: ${{ env.EMAIL_USER }}
          body: |
            ‚ö† SEO audit detected issues in the latest development build.
            
            Please check the attached report for details.
          attachments: ${{ steps.upload.outputs.report }}
